#!/usr/bin/env node

'use strict';

process.title = 'cordova-deploy';

/**
 * Module dependencies.
 */
var program = require('commander');
var builder = require('../lib/builder');
var path = require('path');
var hockeyAppDeploys = require('../lib/hockey-deploy');
var testFlightDeploys = require('../lib/testflight-deploy');
var configReader = require('../lib/config-reader');
var colors = require('colors');
var basedir = process.cwd();

/**
 * App vars
 */
var appName = null;
var appPath = null;
var ipaPath = null;
var dsymPath = null;
var apkPath = null;
var apiKey = null;
var androidId = null;
var iosId = null;
var cordovaConfig = null;
var hockeyConfig = null;
var testFlightConfig = null;
var apiToken = null;
var testFairyToken = null;
var teamToken = null;
var notes = null;
var distlist = null;

program
  .version('0.0.1')
  .option('-b, --build', 'Build Applications (Requires Android or iOS Flag)')
  .option('-a, --android', 'Deploy Android (Requires APK File Location)')
  .option('-i, --ios', 'Deploy iOS (Requires iOS IPA and iOS dSYM File Locations)')
  .option('-h, --hockey', 'Deploy to HockeyApp (Requires HockeyApp API Key and HockeyApp App ID\'s)')
  .option('-t, --testflight', 'Deploy iOS version to TestFlight (Requires API token, Team Token)')
  // .option('-c, --hconfig', 'HockeyApp configuration file location (contains your HockeyApp API key, iOS App ID, and Android App ID')
  .option('-p, --ipa <path>', 'iOS IPA File Location')
  .option('-y, --dsym <path>', 'iOS dSYM File Location')
  .option('-j, --apk <path>', 'Andoid APK File Location')
  .option('-k, --apikey <key>', 'HockeyApp API Key')
  .option('-d, --andid <id>', 'HockeyApp Android App ID')
  .option('-s, --iosid <id>', 'HockeyApp iOS App ID')
  .option('-o, --apitoken <token>', 'TestFlight API Token')
  .option('-e, --teamtoken <token>', 'TestFlight API Token')
  .option('-n, --name <id>', 'Cordova App Name')
  .option('-c, --notes <note>', 'Release notes for the deploy')
  .option('-l, --distlist <command delimited list of groups>', 'TestFlight API Token')
  // .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
  .parse(process.argv);

var appName = program.name || configReader.readCordovaConfig();

notes = program.notes;
distlist = program.distlist;

// configReader.readCordovaConfig().done(function(data){
	// cordovaConfig = data;
// });

hockeyConfig = configReader.readHockeyConfig();
testFlightConfig = configReader.readTestFlightConfig();

console.log('Testflight config: ' + JSON.stringify(testFlightConfig));


// if (program.android) console.log('  - Android');
// if (program.ios) console.log('  - iOS');
var somethingToBuild = typeof program.android != 'undefined' || typeof program.ios != 'undefined';

if(!somethingToBuild) {
	console.log('cordova-deploy - You have not chosen anything to build or deploy a platform. Aborting'.red.bold);
	return;
}

apkPath = program.apk ? program.apk : path.join(process.cwd(), 'platforms', 'android', 'ant-build', appName + '-debug.apk');

if(hockeyConfig) {
	// console.log('We have a hockey config cool!');
	// console.log(hockeyConfig);
	apiKey = hockeyConfig.api_key;
	iosId = hockeyConfig.ios_app_id;
	androidId = hockeyConfig.android_app_id;
} else {
	apiKey = program.apikey;
	iosId = program.iosid;
	androidId = program.andid;
}

if(testFlightConfig) {
	apiToken = testFlightConfig.api_token;
	teamToken = testFlightConfig.team_token;
	testFairyToken = testFlightConfig.tfairy_token;
} else {
	apiToken = program.apitoken;
	teamToken = program.teamtoken;
}

if(program.notes) {
	notes = program.notes;
} else {
	notes = 'Deploy from cordova-deploy on ' + (new Date());
}

if(program.distlist) {
	distlist = program.distlist;
} else {
	distlist = 'Testers';
}


if(program.build) {
	if(program.ios) {
		var appBuild = builder.buildIos(appName);
		appPath = appBuild.app;
		dsymPath = appBuild.dsym;
		ipaPath = builder.buildIpa(appName);
		console.log('iOS application information:');
		console.log('\tApp path: ' + appPath);
		console.log('\tIPA path: ' + ipaPath);
	}

	if(program.android) {
		apkPath = builder.buildAndroid(appName);
	}
}

if(program.ipa) {
	ipaPath = program.ipa;
}
if(program.dsym) {
	dsymPath = program.dsym;
} else {
	//We assume it will be in the build folder from cordova build command
	dsymPath = path.join(process.cwd(), 'platforms', 'ios', 'build', 'device', appName + '.app.dSYM');
}

if(program.hockey){
	if(typeof apiKey == 'undefined' ) {
		console.log('You do not have a HockeyApp API Key set - you cannot proceed'.red.bold);
		return;
	}

	if(program.android) {
		if(typeof androidId == 'undefined') {
			console.log('Cannot Deploy Android - You must supply both the HockeyApp API Key and the HockeyApp Android App ID.')
		} else {
			hockeyAppDeploys.deployAndroidBuild(apiKey, apkPath, androidId);
		}
	}

	if(program.ios) {
		if(typeof iosId == 'undefined') {
			console.log('Cannot Deploy iOS - You must supply both the HockeyApp API Key and the HockeyApp iOS App ID')
		} else {
			hockeyAppDeploys.deployIosBuild(apiKey, ipaPath, dsymPath, iosId);
		}
	}
}

if(program.testflight) {
 	if(typeof apiToken == 'undefined') {
		console.log('You did not supply a Test Flight API Token - you cannot proceed.'.red.bold);
		return;
	}

	if(typeof teamToken == 'undefined') {
	console.log('You did not supply a Test Flight Team Token - you cannot proceed.'.red.bold);
	return;	
	}
	if(program.ios) {
		testFlightDeploys.deployIos(apiToken, teamToken, ipaPath, dsymPath, notes, distlist);
	}

	if(program.android) {
		testFlightDeploys.deployAndroid(testFairyToken, teamToken, apkPath, notes, distlist);
	}
	
}
